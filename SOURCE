local fc = {}

function fc.invertTable(t)
    local inverted = {}
    for k, v in pairs(t) do inverted[v] = k end
    return inverted
end

function fc.flatten(t)
    local result = {}
    local function recurse(tbl)
        for _, v in pairs(tbl) do
            if type(v) == "table" then recurse(v) else table.insert(result, v) end
        end
    end
    recurse(t)
    return result
end

function fc.chunk(t, size)
    local chunks = {}
    for i = 1, #t, size do
        table.insert(chunks, {table.unpack(t, i, i + size - 1)})
    end
    return chunks
end

function fc.frequency(t)
    local counts = {}
    for _, v in pairs(t) do counts[v] = (counts[v] or 0) + 1 end
    return counts
end

function fc.zip(...)
    local tables = {...}
    local result = {}
    for i = 1, math.max(table.unpack(fc.map(tables, "#")) do
        result[i] = fc.map(tables, function(t) return t[i] end)
    end
    return result
end

--[[ STRING UTILITIES (20+ functions) ]]
function fc.slugify(str)
    return str:lower():gsub("[%s_]+", "-"):gsub("[^%w-]", ""):gsub("-+", "-")
end

function fc.levenshtein(a, b)
    local matrix = {}
    for i = 0, #a do matrix[i] = {[0] = i} end
    for j = 0, #b do matrix[0][j] = j end
    
    for i = 1, #a do
        for j = 1, #b do
            matrix[i][j] = math.min(
                matrix[i-1][j] + 1,
                matrix[i][j-1] + 1,
                matrix[i-1][j-1] + (a:sub(i,i) == b:sub(j,j) and 0 or 1
            )
        end
    end
    return matrix[#a][#b]
end

function fc.wrapText(str, lineLength)
    local lines = {}
    for line in str:gmatch("([^\n]+)") do
        while #line > lineLength do
            local space = line:sub(1, lineLength):find(" [^ ]*$")
            table.insert(lines, line:sub(1, (space or lineLength) - 1))
            line = line:sub((space or lineLength) + 1)
        end
        table.insert(lines, line)
    end
    return table.concat(lines, "\n")
end

function fc.isPrime(n)
    if n <= 1 then return false end
    if n <= 3 then return true end
    if n % 2 == 0 or n % 3 == 0 then return false end
    for i = 5, math.sqrt(n), 6 do
        if n % i == 0 or n % (i + 2) == 0 then return false end
    end
    return true
end

function fc.factorial(n)
    if n < 0 then error("Factorial of negative number") end
    return n <= 1 and 1 or n * fc.factorial(n - 1)
end

function fc.distance(x1, y1, x2, y2)
    return math.sqrt((x2 - x1)^2 + (y2 - y1)^2)
end

function fc.memoize(func)
    local cache = {}
    return function(...)
        local key = table.concat({...}, "|")
        if not cache[key] then cache[key] = func(...) end
        return cache[key]
    end
end

function fc.compose(...)
    local funcs = {...}
    return function(initial)
        return fc.reduce(funcs, function(acc, fn) return fn(acc) end, initial)
    end
end

--[[ TIME UTILITIES (10+ functions) ]]
function fc.formatDuration(seconds)
    local units = {
        {604800, "week"}, {86400, "day"}, {3600, "hour"},
        {60, "minute"}, {1, "second"}
    }
    
    for _, unit in ipairs(units) do
        if seconds >= unit[1] then
            local value = math.floor(seconds / unit[1])
            return value.." "..unit[2]..(value > 1 and "s" or "")
        end
    end
    return "0 seconds"
end

function fc.trace()
    local stack = debug.traceback()
    return stack:gsub("stack traceback:\n", ""):split("\n")
end

function fc.queue()
    local front, back = 0, -1
    local elements = {}
    return {
        enqueue = function(v) back += 1 elements[back] = v end,
        dequeue = function()
            if front > back then return nil end
            local v = elements[front]
            elements[front] = nil
            front += 1
            return v
        end,
        size = function() return back - front + 1 end
    }
end

print(fc.slugify("Hello World!"))  --> "hello-world"
print(fc.levenshtein("kitten", "sitting"))  --> 3

local memoizedFib = fc.memoize(function(n)
    return n <= 1 and n or memoizedFib(n-1) + memoizedFib(n-2)
end)
print(memoizedFib(100))  --> Fast calculation

local q = fc.queue()
q.enqueue("first")
q.enqueue("second")
print(q.dequeue())  --> "first"

